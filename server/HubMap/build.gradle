plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

apply plugin: "war"
group = 'br.com.pucminas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '18'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-data'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'black.ninia:jep:4.0.3'
	//runtimeOnly 'mysql:mysql-connector-java'
	//runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

tasks.named('test') {
	useJUnitPlatform()
}

task stage(dependsOn: ['bootJar'])

tasks.stage.doLast() {
  delete fileTree(dir: "build/distributions")
  delete fileTree(dir: "build/assetCompile")
  delete fileTree(dir: "build/distributions")
  delete fileTree(dir: "build/libs", exclude: "*.jar")
}

jar { 
  exclude "test/**"
  exclude "test/**/**"
}

build.mustRunAfter clean

gradle.taskGraph.whenReady {
  taskGraph ->
    if (taskGraph.hasTask(stage)) { 
      test.enabled = false
    }
}

bootJar { 
  enabled = true
  classifier = 'boot'
  exclude "test/**"
  exclude "test/**/**"
}